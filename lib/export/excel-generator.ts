import * as XLSX from 'xlsx';
import { ReportData, ExcelExportOptions } from './types';
import { formatDate, formatNumber, formatPercentage } from './report-data';
import { OMNIA_COLORS } from './chart-generator';

// Excel styling constants
const EXCEL_STYLES = {
  header: {
    font: { bold: true, size: 16, color: { rgb: 'FFFFFF' } },
    fill: { fgColor: { rgb: '3B82F6' } },
    alignment: { horizontal: 'center', vertical: 'center' },
    border: {
      top: { style: 'thin', color: { rgb: '000000' } },
      bottom: { style: 'thin', color: { rgb: '000000' } },
      left: { style: 'thin', color: { rgb: '000000' } },
      right: { style: 'thin', color: { rgb: '000000' } }
    }
  },
  subHeader: {
    font: { bold: true, size: 12, color: { rgb: '1F2937' } },
    fill: { fgColor: { rgb: 'E5E7EB' } },
    alignment: { horizontal: 'center', vertical: 'center' }
  },
  companyHeader: {
    font: { bold: true, size: 20, color: { rgb: '3B82F6' } },
    alignment: { horizontal: 'center', vertical: 'center' }
  },
  kpiValue: {
    font: { bold: true, size: 18, color: { rgb: '10B981' } },
    alignment: { horizontal: 'center', vertical: 'center' }
  },
  kpiLabel: {
    font: { size: 11, color: { rgb: '6B7280' } },
    alignment: { horizontal: 'center', vertical: 'center' }
  },
  tableHeader: {
    font: { bold: true, size: 11, color: { rgb: 'FFFFFF' } },
    fill: { fgColor: { rgb: '3B82F6' } },
    alignment: { horizontal: 'center', vertical: 'center' }
  },
  alternateRow: {
    fill: { fgColor: { rgb: 'F9FAFB' } }
  },
  percentage: {
    numFmt: '0.0%',
    alignment: { horizontal: 'center' }
  },
  currency: {
    numFmt: '#,##0',
    alignment: { horizontal: 'right' }
  },
  date: {
    numFmt: 'dd/mm/yyyy',
    alignment: { horizontal: 'center' }
  }
};

// Translation function for Excel content
function getTranslations(language: 'it' | 'en' | 'es' = 'it') {
  const translations = {
    it: {
      // Sheet names
      summarySheet: 'Sommario',
      employeesSheet: 'Dipendenti',
      departmentsSheet: 'Dipartimenti',
      requestsSheet: 'Richieste',

      // Headers
      holidayReport: 'Report Analisi Ferie',
      period: 'Periodo:',
      generatedOn: 'Generato il:',
      generatedBy: 'Generato da:',

      // KPIs
      keyMetrics: 'Indicatori Chiave',
      totalEmployees: 'Dipendenti Totali',
      activeEmployees: 'Dipendenti Attivi',
      pendingEmployees: 'Dipendenti Pendenti',
      utilizationRate: 'Tasso Utilizzo',
      approvalRate: 'Tasso Approvazione',
      totalRequests: 'Richieste Totali',
      availableDays: 'Giorni Disponibili',
      usedDays: 'Giorni Utilizzati',
      bookedDays: 'Giorni Prenotati',
      pendingDays: 'Giorni Pendenti',

      // Table headers
      name: 'Nome',
      email: 'Email',
      department: 'Dipartimento',
      status: 'Stato',
      allowance: 'Permesso Totale',
      used: 'Utilizzati',
      available: 'Disponibili',
      utilization: 'Utilizzo %',
      requests: 'Richieste',
      employeeCount: 'N. Dipendenti',

      // Request fields
      startDate: 'Data Inizio',
      endDate: 'Data Fine',
      workingDays: 'Giorni Lavorativi',
      type: 'Tipo',
      requestStatus: 'Stato Richiesta',
      notes: 'Note',
      createdAt: 'Creato il',

      // Values
      vacation: 'Ferie',
      sick: 'Malattia',
      personal: 'Permesso',
      pending: 'In Attesa',
      approved: 'Approvato',
      rejected: 'Rifiutato',
      active: 'Attivo',
      inactive: 'Inattivo',

      // Summary sections
      overview: 'Panoramica Generale',
      departmentSummary: 'Riepilogo Dipartimenti',
      requestSummary: 'Riepilogo Richieste',

      // Footer
      confidential: 'Documento Confidenziale - Solo per uso interno'
    },
    en: {
      // Sheet names
      summarySheet: 'Summary',
      employeesSheet: 'Employees',
      departmentsSheet: 'Departments',
      requestsSheet: 'Requests',

      // Headers
      holidayReport: 'Holiday Analysis Report',
      period: 'Period:',
      generatedOn: 'Generated on:',
      generatedBy: 'Generated by:',

      // KPIs
      keyMetrics: 'Key Metrics',
      totalEmployees: 'Total Employees',
      activeEmployees: 'Active Employees',
      pendingEmployees: 'Pending Employees',
      utilizationRate: 'Utilization Rate',
      approvalRate: 'Approval Rate',
      totalRequests: 'Total Requests',
      availableDays: 'Available Days',
      usedDays: 'Used Days',
      bookedDays: 'Booked Days',
      pendingDays: 'Pending Days',

      // Table headers
      name: 'Name',
      email: 'Email',
      department: 'Department',
      status: 'Status',
      allowance: 'Total Allowance',
      used: 'Used',
      available: 'Available',
      utilization: 'Utilization %',
      requests: 'Requests',
      employeeCount: 'Employee Count',

      // Request fields
      startDate: 'Start Date',
      endDate: 'End Date',
      workingDays: 'Working Days',
      type: 'Type',
      requestStatus: 'Request Status',
      notes: 'Notes',
      createdAt: 'Created At',

      // Values
      vacation: 'Vacation',
      sick: 'Sick Leave',
      personal: 'Personal',
      pending: 'Pending',
      approved: 'Approved',
      rejected: 'Rejected',
      active: 'Active',
      inactive: 'Inactive',

      // Summary sections
      overview: 'General Overview',
      departmentSummary: 'Department Summary',
      requestSummary: 'Request Summary',

      // Footer
      confidential: 'Confidential Document - Internal Use Only'
    },
    es: {
      // Sheet names
      summarySheet: 'Resumen',
      employeesSheet: 'Empleados',
      departmentsSheet: 'Departamentos',
      requestsSheet: 'Solicitudes',

      // Headers
      holidayReport: 'Informe Análisis Vacaciones',
      period: 'Período:',
      generatedOn: 'Generado el:',
      generatedBy: 'Generado por:',

      // KPIs
      keyMetrics: 'Métricas Clave',
      totalEmployees: 'Empleados Totales',
      activeEmployees: 'Empleados Activos',
      pendingEmployees: 'Empleados Pendientes',
      utilizationRate: 'Tasa Utilización',
      approvalRate: 'Tasa Aprobación',
      totalRequests: 'Solicitudes Totales',
      availableDays: 'Días Disponibles',
      usedDays: 'Días Utilizados',
      bookedDays: 'Días Reservados',
      pendingDays: 'Días Pendientes',

      // Table headers
      name: 'Nombre',
      email: 'Email',
      department: 'Departamento',
      status: 'Estado',
      allowance: 'Permiso Total',
      used: 'Utilizados',
      available: 'Disponibles',
      utilization: 'Utilización %',
      requests: 'Solicitudes',
      employeeCount: 'N. Empleados',

      // Request fields
      startDate: 'Fecha Inicio',
      endDate: 'Fecha Fin',
      workingDays: 'Días Laborables',
      type: 'Tipo',
      requestStatus: 'Estado Solicitud',
      notes: 'Notas',
      createdAt: 'Creado el',

      // Values
      vacation: 'Vacaciones',
      sick: 'Enfermedad',
      personal: 'Permiso Personal',
      pending: 'Pendiente',
      approved: 'Aprobado',
      rejected: 'Rechazado',
      active: 'Activo',
      inactive: 'Inactivo',

      // Summary sections
      overview: 'Vista General',
      departmentSummary: 'Resumen Departamentos',
      requestSummary: 'Resumen Solicitudes',

      // Footer
      confidential: 'Documento Confidencial - Solo para Uso Interno'
    }
  };

  return translations[language] || translations.it;
}

// Create Summary Sheet
function createSummarySheet(data: ReportData, options: ExcelExportOptions): XLSX.WorkSheet {
  const t = getTranslations(data.metadata.language);
  const ws: XLSX.WorkSheet = {};
  const stats = data.statistics;

  // Company header with custom company name
  const companyName = data.metadata.companyName || 'Company Name';

  XLSX.utils.sheet_add_aoa(ws, [
    [companyName],
    [t.holidayReport],
    [],
    [`${t.period} ${data.period.label}`],
    [`${t.generatedOn} ${formatDate(data.metadata.generatedAt, data.metadata.language)}`],
    [`${t.generatedBy} ${data.metadata.generatedBy.name}`],
    [],
    [t.keyMetrics],
    []
  ], { origin: 'A1' });

  // KPI section with values and labels
  const kpiData = [
    [t.totalEmployees, t.activeEmployees, t.utilizationRate, t.approvalRate],
    [stats.totalEmployees, stats.activeEmployees, `${formatNumber(stats.utilizationRate, 1)}%`, `${formatNumber(stats.approvalRate, 1)}%`],
    [],
    [t.availableDays, t.usedDays, t.bookedDays, t.pendingDays],
    [stats.totalAvailable, stats.totalTaken, stats.totalBooked, stats.totalPending],
    [],
    [t.totalRequests, 'Approvate', 'Pendenti', 'Rifiutate'],
    [stats.totalRequests, stats.approvedRequests, stats.pendingRequests, stats.rejectedRequests]
  ];

  XLSX.utils.sheet_add_aoa(ws, kpiData, { origin: 'A10' });

  // Department summary table
  XLSX.utils.sheet_add_aoa(ws, [[]], { origin: 'A19' });
  XLSX.utils.sheet_add_aoa(ws, [[t.departmentSummary]], { origin: 'A20' });

  const deptHeaders = [t.department, t.employeeCount, 'Ferie Totali Consentite', 'Ferie Totali Utilizzate', 'Ferie Rimanenti', t.utilization, t.requests];
  XLSX.utils.sheet_add_aoa(ws, [deptHeaders], { origin: 'A21' });

  const deptData = data.departmentStats.map(dept => [
    dept.name,
    dept.employeeCount,
    dept.holidaysAllowed,
    dept.holidaysUsed,
    dept.holidaysAllowed - dept.holidaysUsed,
    dept.utilizationRate / 100, // Convert to decimal for percentage format
    dept.requests
  ]);

  XLSX.utils.sheet_add_aoa(ws, deptData, { origin: 'A22' });

  // Advanced Statistics Section
  const lastDeptRow = 21 + deptData.length;
  const statsStartRow = lastDeptRow + 3;

  if (options.includeFormulas) {
    // Add statistics section with enhanced calculations
    XLSX.utils.sheet_add_aoa(ws, [['ANALISI AVANZATE']], { origin: `A${statsStartRow}` });

    // Department with highest utilization analysis
    XLSX.utils.sheet_add_aoa(ws, [['Dipartimento con Maggior Utilizzo:']], { origin: `A${statsStartRow + 2}` });
    ws[`B${statsStartRow + 2}`] = { f: `INDEX(A22:A${lastDeptRow},MATCH(MAX(F22:F${lastDeptRow}),F22:F${lastDeptRow},0))`, t: 's' };

    XLSX.utils.sheet_add_aoa(ws, [['Utilizzo Medio Aziendale:']], { origin: `A${statsStartRow + 3}` });
    ws[`B${statsStartRow + 3}`] = { f: `AVERAGE(F22:F${lastDeptRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Totale Dipendenti:']], { origin: `A${statsStartRow + 4}` });
    ws[`B${statsStartRow + 4}`] = { f: `SUM(B22:B${lastDeptRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Totale Richieste:']], { origin: `A${statsStartRow + 5}` });
    ws[`B${statsStartRow + 5}`] = { f: `SUM(G22:G${lastDeptRow})`, t: 'n' };

    // Additional advanced metrics
    const metricsStartRow = statsStartRow + 7;
    XLSX.utils.sheet_add_aoa(ws, [['METRICHE AGGIUNTIVE']], { origin: `A${metricsStartRow}` });

    XLSX.utils.sheet_add_aoa(ws, [['Dipartimento con Minor Utilizzo:']], { origin: `A${metricsStartRow + 2}` });
    ws[`B${metricsStartRow + 2}`] = { f: `INDEX(A22:A${lastDeptRow},MATCH(MIN(F22:F${lastDeptRow}),F22:F${lastDeptRow},0))`, t: 's' };

    XLSX.utils.sheet_add_aoa(ws, [['Differenza Max-Min Utilizzo:']], { origin: `A${metricsStartRow + 3}` });
    ws[`B${metricsStartRow + 3}`] = { f: `MAX(F22:F${lastDeptRow})-MIN(F22:F${lastDeptRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Ferie Totali Rimanenti:']], { origin: `A${metricsStartRow + 4}` });
    ws[`B${metricsStartRow + 4}`] = { f: `SUM(E22:E${lastDeptRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Media Dipendenti per Dipartimento:']], { origin: `A${metricsStartRow + 5}` });
    ws[`B${metricsStartRow + 5}`] = { f: `AVERAGE(B22:B${lastDeptRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Media Richieste per Dipendente:']], { origin: `A${metricsStartRow + 6}` });
    ws[`B${metricsStartRow + 6}`] = { f: `SUM(G22:G${lastDeptRow})/SUM(B22:B${lastDeptRow})`, t: 'n' };

    // Department Performance Rankings
    const rankingStartRow = metricsStartRow + 9;
    XLSX.utils.sheet_add_aoa(ws, [['CLASSIFICA DIPARTIMENTI']], { origin: `A${rankingStartRow}` });
    XLSX.utils.sheet_add_aoa(ws, [['Dipartimento', 'Utilizzo %', 'Posizione']], { origin: `A${rankingStartRow + 2}` });

    // Add ranking data with formulas
    for (let i = 0; i < deptData.length; i++) {
      const rankRow = rankingStartRow + 3 + i;
      ws[`A${rankRow}`] = { v: deptData[i][0], t: 's' };
      ws[`B${rankRow}`] = { f: `F${22 + i}`, t: 'n' };
      ws[`C${rankRow}`] = { f: `RANK(B${rankRow},B${rankingStartRow + 3}:B${rankingStartRow + 2 + deptData.length},0)`, t: 'n' };
    }

    // Format percentage columns in statistics
    for (let row = statsStartRow; row <= rankingStartRow + 2 + deptData.length; row++) {
      const cellB = `B${row}`;
      if (ws[cellB] && (row === statsStartRow + 3 || row === metricsStartRow + 3)) {
        ws[cellB].s = EXCEL_STYLES.percentage;
      }
    }
  }

  // Set column widths
  ws['!cols'] = [
    { wch: 20 }, { wch: 15 }, { wch: 12 }, { wch: 12 },
    { wch: 12 }, { wch: 10 }, { wch: 15 }
  ];

  // Apply styles
  if (options.includeConditionalFormatting) {
    // Company name styling
    if (ws['A1']) ws['A1'].s = EXCEL_STYLES.companyHeader;
    if (ws['A2']) ws['A2'].s = EXCEL_STYLES.header;

    // KPI values styling
    if (ws['A11']) ws['A11'].s = EXCEL_STYLES.kpiValue;
    if (ws['B11']) ws['B11'].s = EXCEL_STYLES.kpiValue;
    if (ws['C11']) ws['C11'].s = EXCEL_STYLES.kpiValue;
    if (ws['D11']) ws['D11'].s = EXCEL_STYLES.kpiValue;

    // Department headers
    for (let i = 0; i < deptHeaders.length; i++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 20, c: i });
      if (ws[cellAddress]) ws[cellAddress].s = EXCEL_STYLES.tableHeader;
    }

    // Percentage formatting for utilization column
    for (let i = 0; i < deptData.length; i++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 21 + i, c: 4 });
      if (ws[cellAddress]) ws[cellAddress].s = EXCEL_STYLES.percentage;
    }
  }

  return ws;
}

// Create Employees Sheet
function createEmployeesSheet(data: ReportData, options: ExcelExportOptions): XLSX.WorkSheet {
  const t = getTranslations(data.metadata.language);
  const ws: XLSX.WorkSheet = {};

  // Headers
  XLSX.utils.sheet_add_aoa(ws, [
    [`${t.employeesSheet} - ${data.metadata.companyName}`],
    [`${t.period} ${data.period.label}`],
    []
  ], { origin: 'A1' });

  // Table headers
  const headers = [
    t.name,
    t.email,
    t.department,
    t.status,
    t.allowance,
    t.used,
    t.available,
    'Prenotati',
    'Pendenti',
    t.utilization,
    t.requests
  ];

  XLSX.utils.sheet_add_aoa(ws, [headers], { origin: 'A4' });

  // Employee data
  const employeeData = data.employeePerformance.map(emp => [
    emp.name,
    emp.email,
    emp.departmentName || 'N/A',
    emp.status === 'active' ? t.active : t.inactive,
    emp.holidayAllowance,
    emp.holidaysUsed,
    emp.availableDays || (emp.holidayAllowance - emp.holidaysUsed),
    emp.bookedDays || 0,
    emp.pendingDays || 0,
    emp.utilizationRate / 100, // Convert to decimal for percentage format
    emp.requestCount
  ]);

  XLSX.utils.sheet_add_aoa(ws, employeeData, { origin: 'A5' });

  // Add formulas and advanced analytics if requested
  if (options.includeFormulas) {
    const lastEmployeeRow = employeeData.length + 4;
    const totalRow = lastEmployeeRow + 1;

    // Add TOTALI row
    ws[`A${totalRow}`] = { v: 'TOTALI', t: 's' };
    ws[`E${totalRow}`] = { f: `SUM(E5:E${lastEmployeeRow})`, t: 'n' };
    ws[`F${totalRow}`] = { f: `SUM(F5:F${lastEmployeeRow})`, t: 'n' };
    ws[`G${totalRow}`] = { f: `SUM(G5:G${lastEmployeeRow})`, t: 'n' };
    ws[`H${totalRow}`] = { f: `SUM(H5:H${lastEmployeeRow})`, t: 'n' };
    ws[`I${totalRow}`] = { f: `SUM(I5:I${lastEmployeeRow})`, t: 'n' };
    ws[`J${totalRow}`] = { f: `AVERAGE(J5:J${lastEmployeeRow})`, t: 'n' };
    ws[`K${totalRow}`] = { f: `SUM(K5:K${lastEmployeeRow})`, t: 'n' };

    // Advanced Employee Analytics
    const analyticsStartRow = totalRow + 3;

    // Employee performance insights
    XLSX.utils.sheet_add_aoa(ws, [['ANALISI PERFORMANCE DIPENDENTI']], { origin: `A${analyticsStartRow}` });

    XLSX.utils.sheet_add_aoa(ws, [['Dipendente con Maggior Utilizzo Ferie:']], { origin: `A${analyticsStartRow + 2}` });
    ws[`B${analyticsStartRow + 2}`] = { f: `INDEX(A5:A${lastEmployeeRow},MATCH(MAX(J5:J${lastEmployeeRow}),J5:J${lastEmployeeRow},0))`, t: 's' };

    XLSX.utils.sheet_add_aoa(ws, [['Max Utilizzo Registrato:']], { origin: `A${analyticsStartRow + 3}` });
    ws[`B${analyticsStartRow + 3}`] = { f: `MAX(J5:J${lastEmployeeRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Dipendente con Minor Utilizzo Ferie:']], { origin: `A${analyticsStartRow + 4}` });
    ws[`B${analyticsStartRow + 4}`] = { f: `INDEX(A5:A${lastEmployeeRow},MATCH(MIN(J5:J${lastEmployeeRow}),J5:J${lastEmployeeRow},0))`, t: 's' };

    XLSX.utils.sheet_add_aoa(ws, [['Min Utilizzo Registrato:']], { origin: `A${analyticsStartRow + 5}` });
    ws[`B${analyticsStartRow + 5}`] = { f: `MIN(J5:J${lastEmployeeRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Dipendenti con Utilizzo > 80%:']], { origin: `A${analyticsStartRow + 6}` });
    ws[`B${analyticsStartRow + 6}`] = { f: `COUNTIF(J5:J${lastEmployeeRow},">0.8")`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Dipendenti con Utilizzo < 50%:']], { origin: `A${analyticsStartRow + 7}` });
    ws[`B${analyticsStartRow + 7}`] = { f: `COUNTIF(J5:J${lastEmployeeRow},"<0.5")`, t: 'n' };

    // Top performers section
    const topPerformersRow = analyticsStartRow + 10;
    XLSX.utils.sheet_add_aoa(ws, [['TOP 5 DIPENDENTI - MAGGIOR UTILIZZO']], { origin: `A${topPerformersRow}` });
    XLSX.utils.sheet_add_aoa(ws, [['Dipendente', 'Email', 'Utilizzo %', 'Giorni Utilizzati']], { origin: `A${topPerformersRow + 2}` });

    // Add helper columns for ranking (hidden columns for calculations)
    for (let i = 0; i < Math.min(employeeData.length, 5); i++) {
      const topRow = topPerformersRow + 3 + i;
      // Use LARGE function to get top 5 utilization rates
      ws[`C${topRow}`] = { f: `LARGE(J5:J${lastEmployeeRow},${i + 1})`, t: 'n' };
      // Get employee name for this utilization rate
      ws[`A${topRow}`] = { f: `INDEX(A5:A${lastEmployeeRow},MATCH(C${topRow},J5:J${lastEmployeeRow},0))`, t: 's' };
      // Get email
      ws[`B${topRow}`] = { f: `INDEX(B5:B${lastEmployeeRow},MATCH(C${topRow},J5:J${lastEmployeeRow},0))`, t: 's' };
      // Get days used
      ws[`D${topRow}`] = { f: `INDEX(F5:F${lastEmployeeRow},MATCH(C${topRow},J5:J${lastEmployeeRow},0))`, t: 'n' };
    }

    // Departmental breakdown
    const deptBreakdownRow = topPerformersRow + 10;
    XLSX.utils.sheet_add_aoa(ws, [['STATISTICHE PER STATO DIPENDENTI']], { origin: `A${deptBreakdownRow}` });

    XLSX.utils.sheet_add_aoa(ws, [['Dipendenti Attivi:']], { origin: `A${deptBreakdownRow + 2}` });
    ws[`B${deptBreakdownRow + 2}`] = { f: `COUNTIF(D5:D${lastEmployeeRow},"Attivo")`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Media Utilizzo Dipendenti Attivi:']], { origin: `A${deptBreakdownRow + 3}` });
    ws[`B${deptBreakdownRow + 3}`] = { f: `AVERAGEIF(D5:D${lastEmployeeRow},"Attivo",J5:J${lastEmployeeRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Totale Ferie Utilizzate Attivi:']], { origin: `A${deptBreakdownRow + 4}` });
    ws[`B${deptBreakdownRow + 4}`] = { f: `SUMIF(D5:D${lastEmployeeRow},"Attivo",F5:F${lastEmployeeRow})`, t: 'n' };

    // Format percentage columns
    for (let row = analyticsStartRow; row <= deptBreakdownRow + 4; row++) {
      const cellB = `B${row}`;
      const cellC = `C${row}`;
      if (ws[cellB] && (row === analyticsStartRow + 3 || row === analyticsStartRow + 5 || row === deptBreakdownRow + 3)) {
        ws[cellB].s = EXCEL_STYLES.percentage;
      }
      if (ws[cellC] && row >= topPerformersRow + 3 && row <= topPerformersRow + 7) {
        ws[cellC].s = EXCEL_STYLES.percentage;
      }
    }
  }

  // Set column widths
  ws['!cols'] = [
    { wch: 20 }, { wch: 25 }, { wch: 15 }, { wch: 10 },
    { wch: 12 }, { wch: 10 }, { wch: 12 }, { wch: 12 },
    { wch: 12 }, { wch: 12 }, { wch: 10 }
  ];

  // Apply conditional formatting
  if (options.includeConditionalFormatting) {
    // Header styling
    for (let i = 0; i < headers.length; i++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 3, c: i });
      if (ws[cellAddress]) ws[cellAddress].s = EXCEL_STYLES.tableHeader;
    }

    // Alternating row colors and percentage formatting
    for (let i = 0; i < employeeData.length; i++) {
      const rowIndex = i + 4;
      if (i % 2 === 1) {
        for (let j = 0; j < headers.length; j++) {
          const cellAddress = XLSX.utils.encode_cell({ r: rowIndex, c: j });
          if (ws[cellAddress]) {
            ws[cellAddress].s = { ...EXCEL_STYLES.alternateRow };
          }
        }
      }

      // Percentage formatting for utilization column
      const utilizationCell = XLSX.utils.encode_cell({ r: rowIndex, c: 9 });
      if (ws[utilizationCell]) {
        ws[utilizationCell].s = { ...EXCEL_STYLES.percentage, ...(i % 2 === 1 ? EXCEL_STYLES.alternateRow : {}) };
      }
    }
  }

  return ws;
}

// Create Departments Sheet
function createDepartmentsSheet(data: ReportData, options: ExcelExportOptions): XLSX.WorkSheet {
  const t = getTranslations(data.metadata.language);
  const ws: XLSX.WorkSheet = {};

  // Headers
  XLSX.utils.sheet_add_aoa(ws, [
    [`${t.departmentsSheet} - ${data.metadata.companyName}`],
    [`${t.period} ${data.period.label}`],
    []
  ], { origin: 'A1' });

  // Table headers
  const headers = [
    t.department,
    t.employeeCount,
    'Ferie Totali Consentite',
    'Ferie Totali Utilizzate',
    'Ferie Rimanenti',
    t.utilization,
    'Richieste Totali',
    'Media Ferie per Dipendente'
  ];

  XLSX.utils.sheet_add_aoa(ws, [headers], { origin: 'A4' });

  // Department data with additional calculations
  const deptData = data.departmentStats.map((dept, index) => [
    dept.name,
    dept.employeeCount,
    dept.holidaysAllowed,
    dept.holidaysUsed,
    dept.holidaysAllowed - dept.holidaysUsed,
    dept.utilizationRate / 100,
    dept.requests,
    dept.employeeCount > 0 ? dept.holidaysUsed / dept.employeeCount : 0
  ]);

  XLSX.utils.sheet_add_aoa(ws, deptData, { origin: 'A5' });

  // Enhanced Department Analytics
  if (options.includeFormulas) {
    const lastDataRow = deptData.length + 4;
    const statsRow = lastDataRow + 2;

    // Main statistics section
    ws[`A${statsRow}`] = { v: 'STATISTICHE AVANZATE DIPARTIMENTI', t: 's' };

    // Core metrics
    ws[`A${statsRow + 2}`] = { v: 'Dipartimento con Maggior Utilizzo:', t: 's' };
    ws[`B${statsRow + 2}`] = { f: `INDEX(A5:A${lastDataRow},MATCH(MAX(F5:F${lastDataRow}),F5:F${lastDataRow},0))`, t: 's' };

    ws[`A${statsRow + 3}`] = { v: 'Dipartimento con Minor Utilizzo:', t: 's' };
    ws[`B${statsRow + 3}`] = { f: `INDEX(A5:A${lastDataRow},MATCH(MIN(F5:F${lastDataRow}),F5:F${lastDataRow},0))`, t: 's' };

    ws[`A${statsRow + 4}`] = { v: 'Utilizzo Medio Aziendale:', t: 's' };
    ws[`B${statsRow + 4}`] = { f: `AVERAGE(F5:F${lastDataRow})`, t: 'n' };

    ws[`A${statsRow + 5}`] = { v: 'Deviazione Standard Utilizzo:', t: 's' };
    ws[`B${statsRow + 5}`] = { f: `STDEV(F5:F${lastDataRow})`, t: 'n' };

    // Efficiency metrics
    const efficiencyRow = statsRow + 7;
    ws[`A${efficiencyRow}`] = { v: 'ANALISI EFFICIENZA', t: 's' };

    ws[`A${efficiencyRow + 2}`] = { v: 'Dipartimenti ad Alta Efficienza (>75%):', t: 's' };
    ws[`B${efficiencyRow + 2}`] = { f: `COUNTIF(F5:F${lastDataRow},">0.75")`, t: 'n' };

    ws[`A${efficiencyRow + 3}`] = { v: 'Dipartimenti a Bassa Efficienza (<50%):', t: 's' };
    ws[`B${efficiencyRow + 3}`] = { f: `COUNTIF(F5:F${lastDataRow},"<0.5")`, t: 'n' };

    ws[`A${efficiencyRow + 4}`] = { v: 'Totale Ferie Potenzialmente Utilizzabili:', t: 's' };
    ws[`B${efficiencyRow + 4}`] = { f: `SUM(C5:C${lastDataRow})`, t: 'n' };

    ws[`A${efficiencyRow + 5}`] = { v: 'Totale Ferie Effettivamente Utilizzate:', t: 's' };
    ws[`B${efficiencyRow + 5}`] = { f: `SUM(D5:D${lastDataRow})`, t: 'n' };

    ws[`A${efficiencyRow + 6}`] = { v: 'Percentuale Utilizzo Globale:', t: 's' };
    ws[`B${efficiencyRow + 6}`] = { f: `SUM(D5:D${lastDataRow})/SUM(C5:C${lastDataRow})`, t: 'n' };

    // Resource allocation analysis
    const resourceRow = efficiencyRow + 9;
    ws[`A${resourceRow}`] = { v: 'ANALISI ALLOCAZIONE RISORSE', t: 's' };

    ws[`A${resourceRow + 2}`] = { v: 'Dipartimento con Più Dipendenti:', t: 's' };
    ws[`B${resourceRow + 2}`] = { f: `INDEX(A5:A${lastDataRow},MATCH(MAX(B5:B${lastDataRow}),B5:B${lastDataRow},0))`, t: 's' };

    ws[`A${resourceRow + 3}`] = { v: 'Media Dipendenti per Dipartimento:', t: 's' };
    ws[`B${resourceRow + 3}`] = { f: `AVERAGE(B5:B${lastDataRow})`, t: 'n' };

    ws[`A${resourceRow + 4}`] = { v: 'Rapporto Ferie/Dipendente Medio:', t: 's' };
    ws[`B${resourceRow + 4}`] = { f: `SUM(D5:D${lastDataRow})/SUM(B5:B${lastDataRow})`, t: 'n' };

    ws[`A${resourceRow + 5}`] = { v: 'Dipartimenti con Richieste > Media:', t: 's' };
    ws[`B${resourceRow + 5}`] = { f: `COUNTIF(G5:G${lastDataRow},">"&AVERAGE(G5:G${lastDataRow}))`, t: 'n' };

    // Department comparison matrix
    const comparisonRow = resourceRow + 8;
    ws[`A${comparisonRow}`] = { v: 'MATRICE COMPARATIVA DIPARTIMENTI', t: 's' };

    const compHeaders = ['Dipartimento', 'Efficienza', 'Dimensione', 'Carico Richieste', 'Score Complessivo'];
    XLSX.utils.sheet_add_aoa(ws, [compHeaders], { origin: `A${comparisonRow + 2}` });

    // Add comparative analysis for each department
    for (let i = 0; i < deptData.length; i++) {
      const compRow = comparisonRow + 3 + i;
      const dataRow = 5 + i; // Corresponding data row

      ws[`A${compRow}`] = { v: deptData[i][0], t: 's' }; // Department name
      ws[`B${compRow}`] = { f: `F${dataRow}`, t: 'n' }; // Efficiency (utilization)

      // Size score (normalized by max employees)
      ws[`C${compRow}`] = { f: `B${dataRow}/MAX(B5:B${lastDataRow})`, t: 'n' };

      // Request load (normalized)
      ws[`D${compRow}`] = { f: `G${dataRow}/MAX(G5:G${lastDataRow})`, t: 'n' };

      // Overall score (weighted average: 50% efficiency, 25% size, 25% requests)
      ws[`E${compRow}`] = { f: `(B${compRow}*0.5)+(C${compRow}*0.25)+(D${compRow}*0.25)`, t: 'n' };
    }

    // Format percentage columns
    for (let row = statsRow; row <= comparisonRow + 2 + deptData.length; row++) {
      const cellB = `B${row}`;
      if (ws[cellB] && (
        row === statsRow + 4 || row === statsRow + 5 ||
        row === efficiencyRow + 6 || row === resourceRow + 4 ||
        (row >= comparisonRow + 3 && row <= comparisonRow + 2 + deptData.length)
      )) {
        ws[cellB].s = EXCEL_STYLES.percentage;
      }
    }
  }

  // Set column widths
  ws['!cols'] = [
    { wch: 20 }, { wch: 12 }, { wch: 18 }, { wch: 18 },
    { wch: 15 }, { wch: 12 }, { wch: 15 }, { wch: 20 }
  ];

  return ws;
}

// Create Temporal Analysis Sheet
function createTemporalAnalysisSheet(data: ReportData, options: ExcelExportOptions): XLSX.WorkSheet {
  const t = getTranslations(data.metadata.language);
  const ws: XLSX.WorkSheet = {};

  // Headers
  XLSX.utils.sheet_add_aoa(ws, [
    [`Analisi Temporale - ${data.metadata.companyName}`],
    [`${t.period} ${data.period.label}`],
    []
  ], { origin: 'A1' });

  // Monthly breakdown analysis
  XLSX.utils.sheet_add_aoa(ws, [['ANDAMENTO MENSILE RICHIESTE']], { origin: 'A4' });

  const monthlyHeaders = ['Mese', 'Richieste Totali', 'Giorni Richiesti', 'Tasso Approvazione', 'Media Giorni/Richiesta'];
  XLSX.utils.sheet_add_aoa(ws, [monthlyHeaders], { origin: 'A6' });

  // Generate monthly data from requests
  const monthlyData = new Map();
  data.requests.forEach(req => {
    const month = new Date(req.startDate).toLocaleDateString('it-IT', { year: 'numeric', month: 'long' });
    if (!monthlyData.has(month)) {
      monthlyData.set(month, { requests: 0, days: 0, approved: 0, total: 0 });
    }
    const monthData = monthlyData.get(month);
    monthData.requests++;
    monthData.days += req.workingDays;
    monthData.total++;
    if (req.status === 'approved') monthData.approved++;
  });

  let rowIndex = 7;
  monthlyData.forEach((data, month) => {
    const approvalRate = data.total > 0 ? data.approved / data.total : 0;
    const avgDays = data.requests > 0 ? data.days / data.requests : 0;

    XLSX.utils.sheet_add_aoa(ws, [[
      month,
      data.requests,
      data.days,
      approvalRate,
      avgDays
    ]], { origin: `A${rowIndex}` });
    rowIndex++;
  });

  // Trends analysis
  const trendsRow = rowIndex + 2;
  XLSX.utils.sheet_add_aoa(ws, [['ANALISI TREND']], { origin: `A${trendsRow}` });

  if (options.includeFormulas) {
    const lastMonthlyRow = rowIndex - 1;

    XLSX.utils.sheet_add_aoa(ws, [['Mese con Più Richieste:']], { origin: `A${trendsRow + 2}` });
    ws[`B${trendsRow + 2}`] = { f: `INDEX(A7:A${lastMonthlyRow},MATCH(MAX(B7:B${lastMonthlyRow}),B7:B${lastMonthlyRow},0))`, t: 's' };

    XLSX.utils.sheet_add_aoa(ws, [['Picco Massimo Richieste:']], { origin: `A${trendsRow + 3}` });
    ws[`B${trendsRow + 3}`] = { f: `MAX(B7:B${lastMonthlyRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Media Richieste Mensili:']], { origin: `A${trendsRow + 4}` });
    ws[`B${trendsRow + 4}`] = { f: `AVERAGE(B7:B${lastMonthlyRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Variabilità Mensile (StdDev):']], { origin: `A${trendsRow + 5}` });
    ws[`B${trendsRow + 5}`] = { f: `STDEV(B7:B${lastMonthlyRow})`, t: 'n' };

    XLSX.utils.sheet_add_aoa(ws, [['Tasso Approvazione Medio:']], { origin: `A${trendsRow + 6}` });
    ws[`B${trendsRow + 6}`] = { f: `AVERAGE(D7:D${lastMonthlyRow})`, t: 'n' };

    // Format percentage column
    ws[`B${trendsRow + 6}`].s = EXCEL_STYLES.percentage;
    for (let i = 7; i <= lastMonthlyRow; i++) {
      const cellD = `D${i}`;
      if (ws[cellD]) ws[cellD].s = EXCEL_STYLES.percentage;
    }
  }

  // Seasonal patterns
  const seasonalRow = trendsRow + 9;
  XLSX.utils.sheet_add_aoa(ws, [['PATTERN STAGIONALI']], { origin: `A${seasonalRow}` });

  const seasonalHeaders = ['Trimestre', 'Richieste', 'Pattern'];
  XLSX.utils.sheet_add_aoa(ws, [seasonalHeaders], { origin: `A${seasonalRow + 2}` });

  // Add seasonal analysis data
  const seasons = ['Q1 (Gen-Mar)', 'Q2 (Apr-Giu)', 'Q3 (Lug-Set)', 'Q4 (Ott-Dic)'];
  seasons.forEach((season, index) => {
    XLSX.utils.sheet_add_aoa(ws, [[season, '', 'Da analizzare']], { origin: `A${seasonalRow + 3 + index}` });
  });

  // Set column widths
  ws['!cols'] = [
    { wch: 20 }, { wch: 15 }, { wch: 15 }, { wch: 18 }, { wch: 20 }
  ];

  return ws;
}

// Create Requests Sheet
function createRequestsSheet(data: ReportData, options: ExcelExportOptions): XLSX.WorkSheet {
  const t = getTranslations(data.metadata.language);
  const ws: XLSX.WorkSheet = {};

  // Headers
  XLSX.utils.sheet_add_aoa(ws, [
    [`${t.requestsSheet} - ${data.metadata.companyName}`],
    [`${t.period} ${data.period.label}`],
    []
  ], { origin: 'A1' });

  // Table headers
  const headers = [
    t.name,
    t.email,
    t.department,
    t.startDate,
    t.endDate,
    t.workingDays,
    t.type,
    t.requestStatus,
    t.createdAt,
    t.notes
  ];

  XLSX.utils.sheet_add_aoa(ws, [headers], { origin: 'A4' });

  // Helper function to translate values
  const translateType = (type: string) => {
    switch (type) {
      case 'vacation': return t.vacation;
      case 'sick': return t.sick;
      case 'personal': return t.personal;
      default: return type;
    }
  };

  const translateStatus = (status: string) => {
    switch (status) {
      case 'pending': return t.pending;
      case 'approved': return t.approved;
      case 'rejected': return t.rejected;
      default: return status;
    }
  };

  // Request data
  const requestData = data.requests.map(req => [
    req.employeeName,
    req.employeeEmail,
    req.department || 'N/A',
    new Date(req.startDate),
    new Date(req.endDate),
    req.workingDays,
    translateType(req.type),
    translateStatus(req.status),
    new Date(req.createdAt),
    req.notes || ''
  ]);

  XLSX.utils.sheet_add_aoa(ws, requestData, { origin: 'A5' });

  // Set column widths
  ws['!cols'] = [
    { wch: 20 }, { wch: 25 }, { wch: 15 }, { wch: 12 },
    { wch: 12 }, { wch: 12 }, { wch: 12 }, { wch: 12 },
    { wch: 15 }, { wch: 30 }
  ];

  // Apply conditional formatting
  if (options.includeConditionalFormatting) {
    // Headers
    for (let i = 0; i < headers.length; i++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 3, c: i });
      if (ws[cellAddress]) ws[cellAddress].s = EXCEL_STYLES.tableHeader;
    }

    // Date formatting
    for (let i = 0; i < requestData.length; i++) {
      const rowIndex = i + 4;

      // Start date
      const startDateCell = XLSX.utils.encode_cell({ r: rowIndex, c: 3 });
      if (ws[startDateCell]) ws[startDateCell].s = EXCEL_STYLES.date;

      // End date
      const endDateCell = XLSX.utils.encode_cell({ r: rowIndex, c: 4 });
      if (ws[endDateCell]) ws[endDateCell].s = EXCEL_STYLES.date;

      // Created at
      const createdAtCell = XLSX.utils.encode_cell({ r: rowIndex, c: 8 });
      if (ws[createdAtCell]) ws[createdAtCell].s = EXCEL_STYLES.date;
    }
  }

  return ws;
}

// Main Excel export function
export function generateExcelReport(
  data: ReportData,
  options: ExcelExportOptions
): Uint8Array {
  try {
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    const t = getTranslations(data.metadata.language);

    // Create worksheets
    if (options.separateSheets) {
      // Summary sheet
      const summaryWs = createSummarySheet(data, options);
      XLSX.utils.book_append_sheet(wb, summaryWs, t.summarySheet);

      // Employees sheet
      if (options.includeEmployeeDetails) {
        const employeesWs = createEmployeesSheet(data, options);
        XLSX.utils.book_append_sheet(wb, employeesWs, t.employeesSheet);
      }

      // Departments sheet
      if (options.includeDepartmentAnalysis) {
        const departmentsWs = createDepartmentsSheet(data, options);
        XLSX.utils.book_append_sheet(wb, departmentsWs, t.departmentsSheet);
      }

      // Requests sheet
      if (options.includeRequestHistory) {
        const requestsWs = createRequestsSheet(data, options);
        XLSX.utils.book_append_sheet(wb, requestsWs, t.requestsSheet);
      }

      // Temporal Analysis sheet (always include for advanced analytics)
      const temporalWs = createTemporalAnalysisSheet(data, options);
      XLSX.utils.book_append_sheet(wb, temporalWs, 'Analisi Temporale');
    } else {
      // Single sheet with all data
      const allDataWs = createSummarySheet(data, options);
      XLSX.utils.book_append_sheet(wb, allDataWs, t.holidayReport);
    }

    // Set workbook properties with company info
    wb.Props = {
      Title: t.holidayReport,
      Subject: `${t.period} ${data.period.label}`,
      Author: data.metadata.generatedBy.name,
      Company: data.metadata.companyName,
      CreatedDate: data.metadata.generatedAt,
      Application: 'Omnia Holiday Tracker'
    };

    // Convert to array buffer
    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    return new Uint8Array(excelBuffer);

  } catch (error) {
    console.error('Error generating Excel report:', error);
    throw new Error('Failed to generate Excel report');
  }
}

// Utility function to download Excel report
export function downloadExcelReport(
  data: ReportData,
  options: ExcelExportOptions,
  filename?: string
): void {
  try {
    const excelBytes = generateExcelReport(data, options);

    // Create blob and download
    const blob = new Blob([new Uint8Array(excelBytes)], {
      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = filename || `holiday-report-${data.period.type}-${formatDate(data.metadata.generatedAt, data.metadata.language)}.xlsx`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error downloading Excel report:', error);
    throw error;
  }
}

// Create pivot table data (for advanced Excel features)
export function createPivotTableData(data: ReportData): any[] {
  return data.requests.map(req => ({
    Employee: req.employeeName,
    Department: req.department || 'N/A',
    Type: req.type,
    Status: req.status,
    WorkingDays: req.workingDays,
    Month: new Date(req.startDate).toLocaleString('default', { month: 'long' }),
    Year: new Date(req.startDate).getFullYear(),
    CreatedMonth: new Date(req.createdAt).toLocaleString('default', { month: 'long' }),
    CreatedYear: new Date(req.createdAt).getFullYear()
  }));
}