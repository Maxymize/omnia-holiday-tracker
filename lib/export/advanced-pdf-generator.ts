import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { ReportData, PDFExportOptions } from './types';
import { formatDate, formatNumber, formatPercentage } from './report-data';
// Import chart functions through server-only wrapper to avoid Next.js build issues
import {
  generateDepartmentChart,
  generateTrendsChart,
  generateRequestStatusChart,
  generateMonthlyTrendsChart,
  generateStatusPieChart,
  generateDepartmentBarChart,
  generateEmployeePerformanceChart,
  ADVANCED_COLORS
} from './server-chart-wrapper';
// Logo utilities removed - using only company name

// Enhanced PDF configuration for professional reports
const ADVANCED_PDF_CONFIG = {
  margins: {
    top: 25,
    right: 25,
    bottom: 25,
    left: 25
  },
  headerHeight: 60,
  footerHeight: 20,
  logoMaxWidth: 120,
  logoMaxHeight: 45,
  fonts: {
    title: 24,
    subtitle: 16,
    heading: 14,
    body: 10,
    small: 8,
    tiny: 6
  },
  colors: {
    primary: '#2563EB',
    secondary: '#059669',
    accent: '#DC2626',
    warning: '#D97706',
    text: '#1F2937',
    lightText: '#6B7280',
    background: '#F8FAFC',
    border: '#E2E8F0',
    success: '#10B981'
  },
  spacing: {
    section: 20,
    subsection: 15,
    paragraph: 8,
    line: 5
  }
};

// Professional translations for the advanced report
function getAdvancedTranslations(language: 'it' | 'en' | 'es' = 'it') {
  const translations = {
    it: {
      // Header and Title
      holidayReport: 'Report Analisi Ferie',
      executiveSummary: 'Riepilogo Esecutivo',
      generatedOn: 'Generato il',
      period: 'Periodo',
      generatedBy: 'Generato da',

      // Sections
      keyMetrics: 'Metriche Chiave',
      analyticsOverview: 'Panoramica Analitica',
      departmentAnalysis: 'Analisi Dipartimentale',
      employeeInsights: 'Insights Dipendenti',
      trendsAndPatterns: 'Tendenze e Pattern',
      detailedTables: 'Tabelle Dettagliate',
      recommendations: 'Raccomandazioni',

      // Metrics
      totalEmployees: 'Totale Dipendenti',
      activeEmployees: 'Dipendenti Attivi',
      totalRequests: 'Richieste Totali',
      approvalRate: 'Tasso Approvazione',
      utilizationRate: 'Tasso Utilizzo',
      averageUsage: 'Utilizzo Medio',

      // Charts
      requestStatusChart: 'Distribuzione Stato Richieste',
      departmentUtilizationChart: 'Utilizzo per Dipartimento',
      monthlyTrendsChart: 'Tendenze Mensili',
      topEmployeesChart: 'Top Dipendenti',
      holidayTypesChart: 'Tipi di Ferie',

      // Tables
      departmentTable: 'Performance Dipartimentale',
      employeeTable: 'Performance Dipendenti',
      requestsTable: 'Richieste Recenti',

      // Table Headers
      department: 'Dipartimento',
      employee: 'Dipendente',
      name: 'Nome',
      email: 'Email',
      used: 'Utilizzate',
      allowed: 'Consentite',
      available: 'Disponibili',
      utilization: 'Utilizzo %',
      requests: 'Richieste',
      status: 'Stato',
      type: 'Tipo',
      startDate: 'Data Inizio',
      endDate: 'Data Fine',

      // Recommendations
      recommendationsTitle: 'Raccomandazioni Strategiche',
      rec1: '• Monitorare i dipartimenti con alto tasso di utilizzo per prevenire burnout',
      rec2: '• Incoraggiare l\'utilizzo delle ferie nei dipartimenti con basso utilizzo',
      rec3: '• Implementare politiche di bilanciamento tra work-life balance',
      rec4: '• Considerare la redistribuzione del carico di lavoro nei periodi di picco',

      // Footer
      pageOf: 'Pagina {current} di {total}',
      confidential: 'Documento Confidenziale - Solo per Uso Interno'
    },
    en: {
      // Header and Title
      holidayReport: 'Holiday Analytics Report',
      executiveSummary: 'Executive Summary',
      generatedOn: 'Generated on',
      period: 'Period',
      generatedBy: 'Generated by',

      // Sections
      keyMetrics: 'Key Metrics',
      analyticsOverview: 'Analytics Overview',
      departmentAnalysis: 'Department Analysis',
      employeeInsights: 'Employee Insights',
      trendsAndPatterns: 'Trends & Patterns',
      detailedTables: 'Detailed Tables',
      recommendations: 'Recommendations',

      // Metrics
      totalEmployees: 'Total Employees',
      activeEmployees: 'Active Employees',
      totalRequests: 'Total Requests',
      approvalRate: 'Approval Rate',
      utilizationRate: 'Utilization Rate',
      averageUsage: 'Average Usage',

      // Charts
      requestStatusChart: 'Request Status Distribution',
      departmentUtilizationChart: 'Department Utilization',
      monthlyTrendsChart: 'Monthly Trends',
      topEmployeesChart: 'Top Employees',
      holidayTypesChart: 'Holiday Types',

      // Tables
      departmentTable: 'Department Performance',
      employeeTable: 'Employee Performance',
      requestsTable: 'Recent Requests',

      // Table Headers
      department: 'Department',
      employee: 'Employee',
      name: 'Name',
      email: 'Email',
      used: 'Used',
      allowed: 'Allowed',
      available: 'Available',
      utilization: 'Utilization %',
      requests: 'Requests',
      status: 'Status',
      type: 'Type',
      startDate: 'Start Date',
      endDate: 'End Date',

      // Recommendations
      recommendationsTitle: 'Strategic Recommendations',
      rec1: '• Monitor high-utilization departments to prevent burnout',
      rec2: '• Encourage holiday usage in low-utilization departments',
      rec3: '• Implement work-life balance policies',
      rec4: '• Consider workload redistribution during peak periods',

      // Footer
      pageOf: 'Page {current} of {total}',
      confidential: 'Confidential Document - Internal Use Only'
    },
    es: {
      // Header and Title
      holidayReport: 'Informe de Análisis de Vacaciones',
      executiveSummary: 'Resumen Ejecutivo',
      generatedOn: 'Generado el',
      period: 'Período',
      generatedBy: 'Generado por',

      // Sections
      keyMetrics: 'Métricas Clave',
      analyticsOverview: 'Resumen Analítico',
      departmentAnalysis: 'Análisis Departamental',
      employeeInsights: 'Insights de Empleados',
      trendsAndPatterns: 'Tendencias y Patrones',
      detailedTables: 'Tablas Detalladas',
      recommendations: 'Recomendaciones',

      // Metrics
      totalEmployees: 'Total Empleados',
      activeEmployees: 'Empleados Activos',
      totalRequests: 'Solicitudes Totales',
      approvalRate: 'Tasa Aprobación',
      utilizationRate: 'Tasa Utilización',
      averageUsage: 'Uso Promedio',

      // Charts
      requestStatusChart: 'Distribución Estado Solicitudes',
      departmentUtilizationChart: 'Utilización por Departamento',
      monthlyTrendsChart: 'Tendencias Mensuales',
      topEmployeesChart: 'Top Empleados',
      holidayTypesChart: 'Tipos de Vacaciones',

      // Tables
      departmentTable: 'Rendimiento Departamental',
      employeeTable: 'Rendimiento Empleados',
      requestsTable: 'Solicitudes Recientes',

      // Table Headers
      department: 'Departamento',
      employee: 'Empleado',
      name: 'Nombre',
      email: 'Email',
      used: 'Usadas',
      allowed: 'Permitidas',
      available: 'Disponibles',
      utilization: 'Utilización %',
      requests: 'Solicitudes',
      status: 'Estado',
      type: 'Tipo',
      startDate: 'Fecha Inicio',
      endDate: 'Fecha Fin',

      // Recommendations
      recommendationsTitle: 'Recomendaciones Estratégicas',
      rec1: '• Monitorear departamentos con alta utilización para prevenir burnout',
      rec2: '• Fomentar el uso de vacaciones en departamentos con baja utilización',
      rec3: '• Implementar políticas de equilibrio trabajo-vida',
      rec4: '• Considerar redistribución de carga durante períodos pico',

      // Footer
      pageOf: 'Página {current} de {total}',
      confidential: 'Documento Confidencial - Solo Uso Interno'
    }
  };
  return translations[language];
}

// Main function to generate advanced PDF report
export async function generateAdvancedPDFReport(
  data: ReportData,
  options: PDFExportOptions
): Promise<Uint8Array> {
  console.log('🔥🔥🔥 ADVANCED PDF GENERATOR STARTED 🔥🔥🔥');
  console.log('PDF generation data:', {
    totalRequests: data.requests.length,
    periodType: data.period.type,
    language: data.metadata.language,
    companyName: data.metadata.companyName
  });

  const doc = new jsPDF('portrait', 'mm', 'a4');
  const t = getAdvancedTranslations(data.metadata.language);

  let currentPage = 1;
  let currentY = ADVANCED_PDF_CONFIG.margins.top;

  try {
    // Page 1: Cover page and executive summary
    console.log('🔥 MAIN PDF: Starting Page 1 - Cover page 🔥');
    currentY = await generateCoverPage(doc, data, options, t);
    console.log('🔥 MAIN PDF: Page 1 completed successfully 🔥');

    // Page 2: Key metrics and overview charts
    console.log('🔥 MAIN PDF: Starting Page 2 - Metrics 🔥');
    doc.addPage();
    currentPage++;
    currentY = ADVANCED_PDF_CONFIG.margins.top;
    currentY = await generateMetricsPage(doc, data, t, currentY);
    console.log('🔥 MAIN PDF: Page 2 completed successfully 🔥');

    // Page 3: Department analysis
    console.log('🔥 MAIN PDF: Starting Page 3 - Department Analysis 🔥');
    doc.addPage();
    currentPage++;
    currentY = ADVANCED_PDF_CONFIG.margins.top;
    currentY = await generateDepartmentAnalysisPage(doc, data, t, currentY);
    console.log('🔥 MAIN PDF: Page 3 completed successfully 🔥');

    // Page 4: Employee insights
    console.log('🔥 MAIN PDF: Starting Page 4 - Employee Insights 🔥');
    doc.addPage();
    currentPage++;
    currentY = ADVANCED_PDF_CONFIG.margins.top;
    currentY = await generateEmployeeInsightsPage(doc, data, t, currentY);
    console.log('🔥 MAIN PDF: Page 4 completed successfully 🔥');

    // Page 5: Trends and detailed tables
    console.log('🔥 MAIN PDF: About to generate Page 5 - Trends and Tables 🔥');
    doc.addPage();
    currentPage++;
    currentY = ADVANCED_PDF_CONFIG.margins.top;
    console.log('🔥 MAIN PDF: Calling generateTrendsAndTablesPage function 🔥');
    currentY = await generateTrendsAndTablesPage(doc, data, t, currentY);
    console.log('🔥 MAIN PDF: generateTrendsAndTablesPage completed successfully 🔥');

    // Add headers and footers to all pages
    addHeadersAndFooters(doc, data, t);

    return new Uint8Array(doc.output('arraybuffer'));

  } catch (error) {
    console.error('🚨🚨🚨 CRITICAL ERROR IN PDF GENERATION 🚨🚨🚨');
    console.error('Error details:', error);
    console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    console.error('Error occurred at currentPage:', currentPage);
    console.error('Error occurred at currentY:', currentY);
    throw new Error(`Failed to generate advanced PDF: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

// Helper function to format date range for display
function formatDateRange(period: any, language: 'it' | 'en' | 'es' = 'it'): string {
  const startDate = new Date(period.startDate);
  const endDate = new Date(period.endDate);

  const formatOptions: Intl.DateTimeFormatOptions = {
    day: '2-digit',
    month: 'long',
    year: 'numeric'
  };

  const locale = language === 'it' ? 'it-IT' :
                language === 'es' ? 'es-ES' : 'en-US';

  const formattedStart = startDate.toLocaleDateString(locale, formatOptions);
  const formattedEnd = endDate.toLocaleDateString(locale, formatOptions);

  // Check if it's the same day
  if (startDate.toDateString() === endDate.toDateString()) {
    return formattedStart;
  }

  // Check if it's the same month and year
  if (startDate.getMonth() === endDate.getMonth() &&
      startDate.getFullYear() === endDate.getFullYear()) {
    const dayStart = startDate.getDate();
    const dayEnd = endDate.getDate();
    const monthYear = endDate.toLocaleDateString(locale, { month: 'long', year: 'numeric' });
    return `${dayStart} - ${dayEnd} ${monthYear}`;
  }

  // Different months or years
  const separator = ' - ';
  return `${formattedStart}${separator}${formattedEnd}`;
}

// Generate professional cover page
async function generateCoverPage(
  doc: jsPDF,
  data: ReportData,
  options: PDFExportOptions,
  t: any
): Promise<number> {
  let currentY = ADVANCED_PDF_CONFIG.margins.top + 20;

  // Skip logo - use only company name
  console.log('Skipping logo loading, using company name only');

  currentY += 20;

  // Title section with modern styling
  setFillColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.rect(
    ADVANCED_PDF_CONFIG.margins.left,
    currentY - 5,
    doc.internal.pageSize.width - ADVANCED_PDF_CONFIG.margins.left - ADVANCED_PDF_CONFIG.margins.right,
    35,
    'F'
  );

  doc.setTextColor(255, 255, 255);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.title);
  doc.text(
    t.holidayReport,
    ADVANCED_PDF_CONFIG.margins.left + 10,
    currentY + 15
  );

  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.subtitle);
  doc.text(
    data.metadata.companyName || 'OmniaGroup',
    ADVANCED_PDF_CONFIG.margins.left + 10,
    currentY + 27
  );

  currentY += 55;

  // Report overview section (instead of duplicate metrics)
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.text);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.heading + 2);

  // Translated title based on language
  const overviewTitle = {
    it: 'Panoramica Report',
    en: 'Report Overview',
    es: 'Resumen del Informe'
  }[data.metadata.language] || 'Report Overview';

  doc.text(overviewTitle, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 15;
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.body);
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);

  // Professional description text - translated based on language
  const overviewDescriptions = {
    it: [
      'Questo report analitico completo fornisce informazioni dettagliate sui pattern',
      'di utilizzo delle ferie, i tassi di utilizzo dipartimentali e le tendenze',
      'organizzative per supportare la pianificazione strategica del personale.',
      '',
      `Periodo di Analisi: ${data.period.label}`,
      `Generato: ${formatDate(data.metadata.generatedAt, data.metadata.language)}`
    ],
    en: [
      'This comprehensive holiday analytics report provides insights into employee',
      'holiday usage patterns, departmental utilization rates, and organizational',
      'trends to support strategic workforce planning and policy optimization.',
      '',
      `Analysis Period: ${data.period.label}`,
      `Generated: ${formatDate(data.metadata.generatedAt, data.metadata.language)}`
    ],
    es: [
      'Este informe analítico integral proporciona información sobre los patrones',
      'de uso de vacaciones, las tasas de utilización departamental y las tendencias',
      'organizacionales para apoyar la planificación estratégica de la fuerza laboral.',
      '',
      `Período de Análisis: ${data.period.label}`,
      `Generado: ${formatDate(data.metadata.generatedAt, data.metadata.language)}`
    ]
  };

  const overviewText = overviewDescriptions[data.metadata.language] || overviewDescriptions.en;

  overviewText.forEach(line => {
    currentY += 8;
    doc.text(line, ADVANCED_PDF_CONFIG.margins.left, currentY);
  });

  currentY += 60;

  // Generation info
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.small);
  doc.text(
    `${t.generatedOn}: ${formatDate(data.metadata.generatedAt, data.metadata.language)}`,
    ADVANCED_PDF_CONFIG.margins.left,
    currentY
  );
  doc.text(
    `${t.generatedBy}: ${data.metadata.generatedBy.name}`,
    ADVANCED_PDF_CONFIG.margins.left,
    currentY + 8
  );

  return currentY;
}

// Generate metrics overview page
async function generateMetricsPage(
  doc: jsPDF,
  data: ReportData,
  t: any,
  startY: number
): Promise<number> {
  let currentY = startY;

  // Page title
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.subtitle);
  doc.text(t.keyMetrics, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 15;

  // Date range subtitle
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  const dateRange = formatDateRange(data.period, data.metadata.language);
  doc.text(dateRange, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 20;

  // Using pre-imported ADVANCED_COLORS from server-chart-wrapper

  // Key metrics cards
  const metrics = [
    { label: t.totalEmployees, value: formatNumber(data.statistics.totalEmployees), color: ADVANCED_COLORS.primary },
    { label: t.activeEmployees, value: formatNumber(data.statistics.activeEmployees), color: ADVANCED_COLORS.secondary },
    { label: t.totalRequests, value: formatNumber(data.statistics.totalRequests), color: ADVANCED_COLORS.warning },
    { label: t.approvalRate, value: formatPercentage(data.statistics.approvalRate), color: ADVANCED_COLORS.accent }
  ];

  const cardWidth = (doc.internal.pageSize.width - ADVANCED_PDF_CONFIG.margins.left - ADVANCED_PDF_CONFIG.margins.right - 30) / 2;
  const cardHeight = 30;

  for (let i = 0; i < metrics.length; i++) {
    const metric = metrics[i];
    const x = ADVANCED_PDF_CONFIG.margins.left + (i % 2) * (cardWidth + 10);
    const y = currentY + Math.floor(i / 2) * (cardHeight + 10);

    // Draw metric card with solid background
    const [r, g, b] = hexToRgb(metric.color);
    if (r === undefined || g === undefined || b === undefined || isNaN(r) || isNaN(g) || isNaN(b)) {
      console.warn(`⚠️ Invalid RGB values for metric color ${metric.color}, using default blue`);
      doc.setFillColor(37, 99, 235); // blue-600
      doc.setDrawColor(37, 99, 235);
    } else {
      doc.setFillColor(r, g, b);
      doc.setDrawColor(r, g, b);
    }
    doc.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'FD');

    // Metric value - WHITE text for contrast on colored background
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text(metric.value, x + 10, y + 12);

    // Metric label - WHITE text for contrast on colored background
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text(metric.label, x + 10, y + 22);
  }

  currentY += 80;

  // Request status chart
  try {
    const chartBuffer = await generateStatusPieChart(data, data.metadata.language);
    const chartDataUrl = `data:image/png;base64,${chartBuffer.toString('base64')}`;

    const chartWidth = 120;
    const chartHeight = 120;

    doc.addImage(
      chartDataUrl,
      'PNG',
      ADVANCED_PDF_CONFIG.margins.left,
      currentY,
      chartWidth,
      chartHeight
    );
  } catch (error) {
    console.warn('Could not generate status chart:', error);
  }

  return currentY + 120;
}

// Generate department analysis page
async function generateDepartmentAnalysisPage(
  doc: jsPDF,
  data: ReportData,
  t: any,
  startY: number
): Promise<number> {
  let currentY = startY;

  // Page title
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.subtitle);
  doc.text(t.departmentAnalysis, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 12;

  // Date range subtitle
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  const dateRange = formatDateRange(data.period, data.metadata.language);
  doc.text(dateRange, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 20;

  // Department utilization chart
  try {
    console.log('Attempting to generate department chart with data:', {
      departmentCount: data.departmentStats.length,
      departments: data.departmentStats.map(d => ({ name: d.name, utilization: d.utilizationRate }))
    });

    const chartBuffer = await generateDepartmentBarChart(data, data.metadata.language);
    const chartDataUrl = `data:image/png;base64,${chartBuffer.toString('base64')}`;

    const chartWidth = 170;
    const chartHeight = 110;

    doc.addImage(
      chartDataUrl,
      'PNG',
      ADVANCED_PDF_CONFIG.margins.left,
      currentY,
      chartWidth,
      chartHeight
    );

    console.log('Department chart generated successfully');
    currentY += chartHeight + 20;
  } catch (error) {
    console.error('Failed to generate department chart:', error);

    // Add fallback text when chart generation fails
    setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text('Grafico non disponibile - Errore nella generazione', ADVANCED_PDF_CONFIG.margins.left, currentY + 20);
    doc.text('Chart not available - Generation error', ADVANCED_PDF_CONFIG.margins.left, currentY + 35);

    currentY += 60;
  }

  // Department performance table
  const departmentTableData = data.departmentStats.slice(0, 8).map(dept => [
    dept.name,
    formatNumber(dept.employeeCount),
    formatNumber(dept.holidaysUsed),
    formatNumber(dept.holidaysAllowed),
    formatPercentage(dept.utilizationRate)
  ]);

  autoTable(doc, {
    head: [[t.department, t.employee, t.used, t.allowed, t.utilization]],
    body: departmentTableData,
    startY: currentY,
    theme: 'grid',
    headStyles: {
      fillColor: hexToRgb(ADVANCED_PDF_CONFIG.colors.primary),
      textColor: 255,
      fontSize: 10,
      fontStyle: 'bold'
    },
    bodyStyles: {
      fontSize: 9,
      textColor: hexToRgb(ADVANCED_PDF_CONFIG.colors.text)
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252]
    },
    margin: { left: ADVANCED_PDF_CONFIG.margins.left, right: ADVANCED_PDF_CONFIG.margins.right }
  });

  return (doc as any).lastAutoTable.finalY + 20;
}

// Generate employee insights page
async function generateEmployeeInsightsPage(
  doc: jsPDF,
  data: ReportData,
  t: any,
  startY: number
): Promise<number> {
  let currentY = startY;

  // Page title
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.subtitle);
  doc.text(t.employeeInsights, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 12;

  // Date range subtitle
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  const dateRange = formatDateRange(data.period, data.metadata.language);
  doc.text(dateRange, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 20;

  // Top employees chart
  try {
    const chartBuffer = await generateEmployeePerformanceChart(data, data.metadata.language);
    const chartDataUrl = `data:image/png;base64,${chartBuffer.toString('base64')}`;

    const chartWidth = 170;
    const chartHeight = 110;

    doc.addImage(
      chartDataUrl,
      'PNG',
      ADVANCED_PDF_CONFIG.margins.left,
      currentY,
      chartWidth,
      chartHeight
    );

    currentY += chartHeight + 20;
  } catch (error) {
    console.warn('Could not generate employee chart:', error);
    currentY += 130;
  }

  // Employee performance table
  const employeeTableData = data.employeePerformance
    .filter(emp => emp.status === 'active')
    .slice(0, 10)
    .map(emp => [
      emp.name,
      emp.departmentName || 'N/A',
      formatNumber(emp.holidaysUsed),
      formatNumber(emp.holidayAllowance),
      formatPercentage(emp.utilizationRate)
    ]);

  autoTable(doc, {
    head: [[t.name, t.department, t.used, t.allowed, t.utilization]],
    body: employeeTableData,
    startY: currentY,
    theme: 'grid',
    headStyles: {
      fillColor: hexToRgb(ADVANCED_PDF_CONFIG.colors.secondary),
      textColor: 255,
      fontSize: 10,
      fontStyle: 'bold'
    },
    bodyStyles: {
      fontSize: 9,
      textColor: hexToRgb(ADVANCED_PDF_CONFIG.colors.text)
    },
    alternateRowStyles: {
      fillColor: [248, 250, 252]
    },
    margin: { left: ADVANCED_PDF_CONFIG.margins.left, right: ADVANCED_PDF_CONFIG.margins.right }
  });

  return (doc as any).lastAutoTable.finalY + 20;
}

// Generate trends and tables page
async function generateTrendsAndTablesPage(
  doc: jsPDF,
  data: ReportData,
  t: any,
  startY: number
): Promise<number> {
  console.log('🔥 TRENDS PAGE: Function started, startY =', startY, '🔥');
  let currentY = startY;

  // Page title
  console.log('🔥 TRENDS PAGE: Setting page title - t.trendsAndPatterns =', t.trendsAndPatterns, '🔥');
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.subtitle);
  doc.text(t.trendsAndPatterns, ADVANCED_PDF_CONFIG.margins.left, currentY);
  console.log('🔥 TRENDS PAGE: Page title set successfully 🔥');

  currentY += 12;

  // Date range subtitle
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(11);
  const dateRange = formatDateRange(data.period, data.metadata.language);
  doc.text(dateRange, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 20;

  // Monthly trends chart
  try {
    console.log('🔥 PDF GENERATOR: Starting monthly trends chart section 🔥');
    console.log('Attempting to generate monthly trends chart with data:', {
      totalRequests: data.requests.length,
      periodType: data.period.type,
      periodLabel: data.period.label,
      startDate: data.period.startDate,
      endDate: data.period.endDate
    });

    console.log('🔥 PDF GENERATOR: Using server chart wrapper 🔥');

    console.log('🔥 PDF GENERATOR: About to call generateMonthlyTrendsChart 🔥');
    const chartBuffer = await generateMonthlyTrendsChart(data, data.metadata.language);
    console.log('🔥 PDF GENERATOR: Chart buffer generated successfully 🔥');
    const chartDataUrl = `data:image/png;base64,${chartBuffer.toString('base64')}`;

    const chartWidth = 170;
    const chartHeight = 100;

    doc.addImage(
      chartDataUrl,
      'PNG',
      ADVANCED_PDF_CONFIG.margins.left,
      currentY,
      chartWidth,
      chartHeight
    );

    console.log('Monthly trends chart generated successfully');
    currentY += chartHeight + 20;
  } catch (error) {
    console.error('🚨 PDF GENERATOR: MONTHLY TRENDS CHART ERROR 🚨');
    console.error('Error details:', error);
    console.error('Error message:', error instanceof Error ? error.message : 'Unknown error');
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');

    // Add fallback text when chart generation fails
    setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text('Grafico tendenze non disponibile - Errore nella generazione', ADVANCED_PDF_CONFIG.margins.left, currentY + 20);
    doc.text('Trends chart not available - Generation error', ADVANCED_PDF_CONFIG.margins.left, currentY + 35);

    currentY += 60;
  }

  // Recommendations section
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.primary);
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.heading);
  doc.text(t.recommendationsTitle, ADVANCED_PDF_CONFIG.margins.left, currentY);

  currentY += 15;
  setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.text);
  doc.setFont('helvetica', 'normal');
  doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.body);

  const recommendations = [t.rec1, t.rec2, t.rec3, t.rec4];
  recommendations.forEach(rec => {
    currentY += 8;
    doc.text(rec, ADVANCED_PDF_CONFIG.margins.left, currentY);
  });

  return currentY + 20;
}

// Add headers and footers to all pages
function addHeadersAndFooters(doc: jsPDF, data: ReportData, t: any) {
  const pageCount = doc.getNumberOfPages();

  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);

    // Header (skip for cover page)
    if (i > 1) {
      setDrawColorSafe(doc, ADVANCED_PDF_CONFIG.colors.border);
      doc.line(
        ADVANCED_PDF_CONFIG.margins.left,
        ADVANCED_PDF_CONFIG.margins.top - 5,
        doc.internal.pageSize.width - ADVANCED_PDF_CONFIG.margins.right,
        ADVANCED_PDF_CONFIG.margins.top - 5
      );
    }

    // Footer
    const footerY = doc.internal.pageSize.height - ADVANCED_PDF_CONFIG.margins.bottom + 10;

    setDrawColorSafe(doc, ADVANCED_PDF_CONFIG.colors.border);
    doc.line(
      ADVANCED_PDF_CONFIG.margins.left,
      footerY - 5,
      doc.internal.pageSize.width - ADVANCED_PDF_CONFIG.margins.right,
      footerY - 5
    );

    setTextColorSafe(doc, ADVANCED_PDF_CONFIG.colors.lightText);
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(ADVANCED_PDF_CONFIG.fonts.tiny);

    // Page number
    doc.text(
      t.pageOf.replace('{current}', i.toString()).replace('{total}', pageCount.toString()),
      doc.internal.pageSize.width - ADVANCED_PDF_CONFIG.margins.right,
      footerY,
      { align: 'right' }
    );

    // Confidential notice
    doc.text(
      t.confidential,
      ADVANCED_PDF_CONFIG.margins.left,
      footerY
    );
  }
}

// Utility function to convert hex to RGB
function hexToRgb(hex: string): [number, number, number] {
  console.log(`🎨 hexToRgb called with: ${hex} (type: ${typeof hex})`);

  // Ensure hex is a string
  if (typeof hex !== 'string') {
    console.warn(`⚠️ hexToRgb received non-string: ${hex}, using black`);
    return [0, 0, 0];
  }

  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (result) {
    const r = parseInt(result[1], 16);
    const g = parseInt(result[2], 16);
    const b = parseInt(result[3], 16);
    console.log(`🎨 hexToRgb success: ${hex} -> [${r}, ${g}, ${b}]`);
    return [r, g, b];
  } else {
    console.warn(`⚠️ hexToRgb failed to parse: ${hex}, using black`);
    return [0, 0, 0];
  }
}

// Utility functions to safely set colors
function setTextColorSafe(doc: jsPDF, color: string) {
  console.log(`🎨 Setting text color: ${color}`);
  const [r, g, b] = hexToRgb(color);
  console.log(`🎨 RGB values: r=${r}, g=${g}, b=${b}`);
  if (r === undefined || g === undefined || b === undefined || isNaN(r) || isNaN(g) || isNaN(b)) {
    console.warn(`⚠️ Invalid RGB values for color ${color}, using black instead`);
    doc.setTextColor(0, 0, 0);
  } else {
    doc.setTextColor(r, g, b);
  }
}

function setFillColorSafe(doc: jsPDF, color: string) {
  const [r, g, b] = hexToRgb(color);
  if (r === undefined || g === undefined || b === undefined || isNaN(r) || isNaN(g) || isNaN(b)) {
    console.warn(`⚠️ Invalid RGB values for fill color ${color}, using black instead`);
    doc.setFillColor(0, 0, 0);
  } else {
    doc.setFillColor(r, g, b);
  }
}

function setDrawColorSafe(doc: jsPDF, color: string) {
  const [r, g, b] = hexToRgb(color);
  if (r === undefined || g === undefined || b === undefined || isNaN(r) || isNaN(g) || isNaN(b)) {
    console.warn(`⚠️ Invalid RGB values for draw color ${color}, using black instead`);
    doc.setDrawColor(0, 0, 0);
  } else {
    doc.setDrawColor(r, g, b);
  }
}